{
  "_args": [
    [
      {
        "raw": "proxyquireify@^3.0.1",
        "scope": null,
        "escapedName": "proxyquireify",
        "name": "proxyquireify",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "/home/popschool/www/git/tpViewJSPhilippe"
    ]
  ],
  "_from": "proxyquireify@>=3.0.1 <4.0.0",
  "_id": "proxyquireify@3.2.1",
  "_inCache": true,
  "_location": "/proxyquireify",
  "_nodeVersion": "5.11.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/proxyquireify-3.2.1.tgz_1469580021271_0.6476089751813561"
  },
  "_npmUser": {
    "name": "bendrucker",
    "email": "bvdrucker@gmail.com"
  },
  "_npmVersion": "3.10.5",
  "_phantomChildren": {
    "defined": "1.0.0",
    "escodegen": "1.9.1"
  },
  "_requested": {
    "raw": "proxyquireify@^3.0.1",
    "scope": null,
    "escapedName": "proxyquireify",
    "name": "proxyquireify",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/proxyquireify/-/proxyquireify-3.2.1.tgz",
  "_shasum": "15bee101360acc91dcd86ee4d9a445f8a971eea0",
  "_shrinkwrap": null,
  "_spec": "proxyquireify@^3.0.1",
  "_where": "/home/popschool/www/git/tpViewJSPhilippe",
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "bugs": {
    "url": "https://github.com/thlorenz/proxyquireify/issues"
  },
  "dependencies": {
    "browser-pack": "^6.0.0",
    "detective": "~4.1.0",
    "fill-keys": "^1.0.0",
    "has-require": "^1.1.0",
    "module-not-found-error": "~1.0.1",
    "require-deps": "~1.0.1",
    "through": "~2.2.7",
    "xtend": "^3.0.0"
  },
  "description": "Proxies browserify's require in order to allow overriding dependencies during testing.",
  "devDependencies": {
    "browserify": "^10.0.0",
    "mold-source-map": "~0.2.0",
    "tap": "~0.4.8",
    "tape": "~2.12.3",
    "test-peer-range": "^1.0.1",
    "watchify": "^3.6.1"
  },
  "directories": {},
  "dist": {
    "shasum": "15bee101360acc91dcd86ee4d9a445f8a971eea0",
    "tarball": "https://registry.npmjs.org/proxyquireify/-/proxyquireify-3.2.1.tgz"
  },
  "engine": {
    "node": ">=0.6"
  },
  "gitHead": "8f2596ee5b931a5646bb35746c805ab80f51aa99",
  "homepage": "https://github.com/thlorenz/proxyquireify",
  "keywords": [
    "require",
    "dependency",
    "test",
    "mock",
    "stub",
    "proxyquire",
    "browser",
    "browserify",
    "browserify-tool",
    "browserify-plugin",
    "client"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    },
    {
      "name": "bendrucker",
      "email": "bvdrucker@gmail.com"
    }
  ],
  "name": "proxyquireify",
  "optionalDependencies": {},
  "peerDependencies": {
    "browserify": ">=5.1.0"
  },
  "readme": "# proxyquireify [![build status](https://secure.travis-ci.org/thlorenz/proxyquireify.svg?branch=master)](http://travis-ci.org/thlorenz/proxyquireify)\n\nbrowserify `>= v2` version of [proxyquire](https://github.com/thlorenz/proxyquire). \n\nProxies browserify's require in order to make overriding dependencies during testing easy while staying **totally unobstrusive**. To run your tests in both Node and the browser, use [proxyquire-universal](https://github.com/bendrucker/proxyquire-universal).\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n**Table of Contents**  *generated with [DocToc](https://github.com/thlorenz/doctoc)*\n\n- [Features](#features)\n- [Installation](#installation)\n- [Example](#example)\n- [With Other Transforms](#with-other-transforms)\n- [API](#api)\n  - [proxyquire.plugin()](#proxyquireplugin)\n  - [proxyquire.browserify()](#proxyquirebrowserify)\n    - [Deprecation Warning](#deprecation-warning)\n  - [proxyquire(request: String, stubs: Object)](#proxyquirerequest-string-stubs-object)\n    - [Important Magic](#important-magic)\n  - [noCallThru](#nocallthru)\n- [More Examples](#more-examples)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Features\n\n- **no changes to your code** are necessary\n- non overriden methods of a module behave like the original\n- mocking framework agnostic, if it can stub a function then it works with **proxyquireify**\n- \"use strict\" compliant\n- [automatic injection](https://github.com/thlorenz/proxyquireify#important-magic) of `require` calls to ensure the\n  module you are testing gets bundled \n\n## Installation\n\n    npm install proxyquireify\n\nTo use with browserify `< 5.1` please `npm install proxyquireify@0.5` instead. To run your tests in PhantomJS, you may need to [use a shim](https://github.com/bendrucker/phantom-ownpropertynames).\n\n## Example \n\n**foo.js**:\n\n```js\nvar bar = require('./bar');\n\nmodule.exports = function () {\n  return bar.kinder() + ' ist ' + bar.wunder();\n};\n```\n\n**foo.test.js**:\n\n```js\nvar proxyquire = require('proxyquireify')(require);\n\nvar stubs = { \n  './bar': { \n      wunder: function () { return 'wirklich wunderbar'; }\n    , kinder: function () { return 'schokolade'; }\n  }\n};\n\nvar foo = proxyquire('./src/foo', stubs);\n\nconsole.log(foo()); \n```\n\n**browserify.build.js**:\n\n```js\nvar browserify = require('browserify');\nvar proxyquire = require('proxyquireify');\n\nbrowserify()\n  .plugin(proxyquire.plugin)\n  .require(require.resolve('./foo.test'), { entry: true })\n  .bundle()\n  .pipe(fs.createWriteStream(__dirname + '/bundle.js'));\n```\n\nload it in the browser and see:\n\n    schokolade ist wirklich wunderbar\n\n## With Other Transforms\n\nIf you're transforming your source code to JavaScript, you must apply those transforms before applying the proxyquireify plugin:\n\n```js\nbrowserify()\n  .transform('coffeeify')\n  .plugin(proxyquire.plugin)\n  .require(require.resolve('./test.coffee'), { entry: true })\n  .bundle()\n  .pipe(fs.createWriteStream(__dirname + '/bundle.js'));\n```\n\nproxyquireify needs to parse your code looking for `require` statements. If you `require` anything that's not valid JavaScript that [acorn](https://github.com/marijnh/acorn) can parse (e.g. CoffeeScript, TypeScript), you need to make sure the relevant transform runs before proxyquireify.\n\n## API\n\n### proxyquire.plugin()\n\n**proxyquireify** functions as a browserify plugin and needs to be registered with browserify like so:\n\n```js\nvar browserify = require('browserify');\nvar proxyquire = require('proxyquireify');\n\nbrowserify()\n  .plugin(proxyquire.plugin)\n  .require(require.resolve('./test'), { entry: true })\n  .bundle()\n  .pipe(fs.createWriteStream(__dirname + '/bundle.js'));\n```\n\nAlternatively you can register **proxyquireify** as a plugin from the command line like so:\n\n```sh\nbrowserify -p proxyquireify/plugin test.js > bundle.js\n```\n\n### proxyquire.browserify()\n\n#### Deprecation Warning\n\nThis API to setup **proxyquireify** was used prior to [browserify plugin](https://github.com/substack/node-browserify#bpluginplugin-opts) support.\n\nIt has not been removed yet to make upgrading **proxyquireify** easier for now, but it **will be deprecated in future\nversions**. Please consider using the plugin API (above) instead.\n\n****\n\nTo be used in build script instead of `browserify()`, autmatically adapts browserify to work for tests and injects\nrequire overrides into all modules via a browserify transform.\n\n```js\nproxyquire.browserify()\n  .require(require.resolve('./test'), { entry: true })\n  .bundle()\n  .pipe(fs.createWriteStream(__dirname + '/bundle.js'));\n```\n\n****\n\n### proxyquire(request: String, stubs: Object)\n\n- **request**: path to the module to be tested e.g., `../lib/foo`\n- **stubs**: key/value pairs of the form `{ modulePath: stub, ... }`\n  - module paths are relative to the tested module **not** the test file \n  - therefore specify it exactly as in the require statement inside the tested file\n  - values themselves are key/value pairs of functions/properties and the appropriate override\n\n```js\nvar proxyquire =  require('proxyquireify')(require);\nvar barStub    =  { wunder: function () { 'really wonderful'; } };\n\nvar foo = proxyquire('./foo', { './bar': barStub })\n```\n\n#### Important Magic \n\nIn order for browserify to include the module you are testing in the bundle, **proxyquireify** will inject a\n`require()` call for every module you are proxyquireing. So in the above example `require('./foo')` will be injected at\nthe top of your test file.\n\n### noCallThru\n\nBy default **proxyquireify** calls the function defined on the *original* dependency whenever it is not found on the stub.\n\nIf you prefer a more strict behavior you can prevent *callThru* on a per module or per stub basis.\n\nIf *callThru* is disabled, you can stub out modules that weren't even included in the bundle. **Note**, that unlike in\nproxquire, there is no option to prevent call thru globally.\n\n```js\n// Prevent callThru for path module only\nvar foo = proxyquire('./foo', {\n    path: {\n      extname: function (file) { ... }\n    , '@noCallThru': true\n    }\n  , fs: { readdir: function (..) { .. } }\n});\n\n// Prevent call thru for all contained stubs (path and fs)\nvar foo = proxyquire('./foo', {\n    path: {\n      extname: function (file) { ... }\n    }\n  , fs: { readdir: function (..) { .. } }\n  , '@noCallThru': true\n});\n\n// Prevent call thru for all stubs except path\nvar foo = proxyquire('./foo', {\n    path: {\n      extname: function (file) { ... }\n    , '@noCallThru': false\n    }\n  , fs: { readdir: function (..) { .. } }\n  , '@noCallThru': true\n});\n```\n\n## More Examples\n\n- [foobar](https://github.com/thlorenz/proxyquireify/tree/master/examples/foobar)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/proxyquireify.git"
  },
  "scripts": {
    "test": "test-peer-range browserify",
    "test-main": "tap test/*.js && node test/clientside/run.js"
  },
  "version": "3.2.1"
}
